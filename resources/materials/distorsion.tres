[gd_resource type="CanvasItemMaterial" load_steps=2 format=1]

[sub_resource type="CanvasItemShader" id=1]

_code = {
"fragment": "uniform float strength;

float lerp(float a, float b, float t)
{
	return a + t * (b - a);
}

vec2 hash( vec2 p ) 
{  						
	p = vec2(dot(p,vec2(127.1,311.7)),
			 dot(p,vec2(269.5,183.3)));
    
	return vec2(-1.0) + vec2(2.0) * fract(vec2(sin(p.x + 20.0) * 53758.5453123, sin(p.y + 20.0) * 53758.5453123));
}

float noise(vec2 p)
{
	vec2 i = floor(p);
	vec2 f = fract(p);
    
    //grid points
    vec2 p0 = vec2(0.0, 0.0);
    vec2 p1 = vec2(1.0, 0.0);
    vec2 p2 = vec2(0.0, 1.0);
    vec2 p3 = vec2(1.0, 1.0);
    
    //distance vectors to each grid point
    vec2 s0 = f - p0;
    vec2 s1 = f - p1;
    vec2 s2 = f - p2;
    vec2 s3 = f - p3;
    
    //random gradient vectors on each grid point
    vec2 g0 = hash(i + p0);
    vec2 g1 = hash(i + p1);
    vec2 g2 = hash(i + p2);
    vec2 g3 = hash(i + p3);
    
    //gradient values
    float q0 = dot(s0, g0);
    float q1 = dot(s1, g1);
    float q2 = dot(s2, g2);
    float q3 = dot(s3, g3);
    
    //interpolant weights
    vec2 u = f * f * ( vec2(strength + 1.0) - vec2(strength) * f);
     
    //bilinear interpolation
    float l0 = lerp(q0, q1, u.x);
    float l1 = lerp(q2, q3, u.x);
    float l2 = lerp(l0, l1, u.y);
    
    return l2;
}

float fbm(vec2 uv, float persistence) 
{
    float total = 0.0;
    float maxValue = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    
    total += noise(uv * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
	total += noise(uv * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
	total += noise(uv * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
	total += noise(uv * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
	total += noise(uv * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
	total += noise(uv * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
	total += noise(uv * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
	total += noise(uv * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= persistence;
    frequency *= 2.0;
        
    return total/maxValue;
}

vec4 render(vec2 uv)
{
    float n = fbm(uv, 0.2);
    return vec4(n+0.5);
}
   	vec2 p_m = UV.xy;
vec2 p_d = UV.xy;
   
p_d.x -= TIME * 0.2;


vec4 noiseFragColor = render(p_d);
vec4 dst_map_val = noiseFragColor;

vec2 dst_offset = dst_map_val.xy;
dst_offset -= vec2(0.5,0.5);
dst_offset *= vec2(2.0, 2.0);

dst_offset *= 0.01;


dst_offset *= vec2(1.0 - p_m.x);

vec2 dist_tex_coord = p_m.xy + dst_offset;


COLOR = tex(TEXTURE, dist_tex_coord);",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

[resource]

resource/name = "distorsion"
shader/shader = SubResource( 1 )
shader/shading_mode = 0
shader_param/strength = 15.0

